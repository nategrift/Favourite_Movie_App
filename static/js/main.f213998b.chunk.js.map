{"version":3,"sources":["components/MovieList/MovieList.module.css","components/Banner/Banner.module.css","components/Button/Button.module.css","components/SearchBox/SearchBox.module.css","components/Loading/Loading.module.css","components/Button/Button.js","images/image-missing.svg","components/MovieList/MovieList.js","images/search.svg","components/SearchBox/SearchBox.js","components/Loading/Loading.js","images/bell.svg","components/Banner/Banner.js","App.js","index.js"],"names":["module","exports","Button","props","className","classes","onClick","click","disabled","children","MovieList","movieElements","movies","map","movie","imgContainer","Poster","src","alt","Title","ImageMissing","missingImage","Year","excludeList","includes","imdbID","e","buttonClick","target","buttonText","title","totalDisplayed","totalResults","smallText","SearchBox","searchImage","value","inputText","onChange","setInputText","Loading","Banner","show","BellImage","text","API_KEY","App","searchResults","nominatedList","useState","searchText","setSearchText","setMovies","nominated","setNominated","error","setError","banner","setBanner","showBanner","setShowBanner","Search","elem","length","MAX_NOMINATED","setTimeout","newNominated","nominatedIdList","localStorage","setItem","JSON","stringify","_","filter","removeItem","getItem","useEffect","nominatedStored","nominatedStoredIdList","parse","nominatedMovies","nominatedPromises","forEach","movieId","push","fetch","then","res","json","result","Response","Error","err","Promise","all","event","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f213998b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieList\":\"MovieList_MovieList__2uXh-\",\"imgContainer\":\"MovieList_imgContainer__1I7_s\",\"missingImage\":\"MovieList_missingImage__QknpZ\",\"smallText\":\"MovieList_smallText___Sf7u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Banner\":\"Banner_Banner__1IRiH\",\"bellShake\":\"Banner_bellShake__aqPsh\",\"show\":\"Banner_show__1DgTg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3R1xi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchBox\":\"SearchBox_SearchBox__1EOgT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loading\":\"Loading_Loading__2QGVy\",\"loading-spinning\":\"Loading_loading-spinning__1qsbr\"};","// Created By Nate Grift\n// © 2021 Nate Grift\n\nimport React from 'react';\n\nimport classes from './Button.module.css';\n\n\nfunction Button(props) {\n    \n    // Prop ~ Types - Description\n\n    // disabled ~ Boolean - Text for banner\n    // onClick ~ Function - Callback when button is clicked\n    // classes ~ String - Additional Classes passed from parent seperated by spaces\n\n\n    return (\n      <button className={`${classes.Button} ${props.classes}`} onClick={props.click} disabled={props.disabled}>{props.children}</button>\n    );\n}\n\nexport default Button;\n","export default __webpack_public_path__ + \"static/media/image-missing.fc835d59.svg\";","// Created By Nate Grift\n// © 2021 Nate Grift\n\nimport React from 'react';\n\nimport classes from './MovieList.module.css';\nimport Button from '../Button/Button';\n\nimport ImageMissing from '../../images/image-missing.svg';\n\nfunction MovieList(props) {\n    // Prop ~ Types - Description\n\n    // movies ~ Array - List of movies retreived from database\n    // title ~ String - Title for element\n    // buttonText ~ String - Button Text\n    // buttonClick ~ Function - What happens when button is clicked\n\n    // OPTIONAL PROPS\n    // totalResults ~ Number - List of total number of results\n    // totalDisplayed ~ Number - List of how many items in list\n    // classes ~ String - Additional Classes passed from parent seperated by spaces\n\n    // Show movies if visable\n\n    const movieElements = props.movies.map((movie) => (\n        <li key={movie.imdbID}>\n            <div className={classes.imgContainer}>\n                {movie.Poster !== 'N/A' ? (\n                    <img src={movie.Poster} alt={`${movie.Title}`}></img>\n                ) : (\n                    <img\n                        src={ImageMissing}\n                        className={classes.missingImage}\n                        alt=\"null\"\n                    ></img>\n                )}\n            </div>\n            <p>{`${movie.Title} (${movie.Year})`}</p>\n            <Button\n                disabled={\n                    props.excludeList\n                        ? props.excludeList.includes(movie.imdbID)\n                        : false\n                }\n                click={(e) => props.buttonClick(e.target, movie)}\n            >\n                {props.buttonText}\n            </Button>\n        </li>\n    ));\n\n    return (\n        <div className={`${classes.MovieList} ${props.classes}`}>\n            <h2>{`${props.title} ${\n                props.totalDisplayed ? `(${props.totalDisplayed})` : ''\n            }`}</h2>\n            {props.totalResults ? (\n                <p\n                    className={classes.smallText}\n                >{`${props.totalResults} results found`}</p>\n            ) : null}\n            <ul>{movieElements}</ul>\n        </div>\n    );\n}\n\nexport default MovieList;\n","export default __webpack_public_path__ + \"static/media/search.21f97333.svg\";","// Created By Nate Grift\n// © 2021 Nate Grift\n\nimport React from 'react';\n\nimport classes from './SearchBox.module.css';\n\nimport searchImage from '../../images/search.svg'\n\nfunction SearchBox(props) {\n\n    // Prop ~ Types - Description\n\n    // title ~ String - Title for Search Box\n    // inputText ~ String - Value of input\n    // setInputText ~ Function - Funciton to be called when input changes\n\n    return (\n        <div className={classes.SearchBox}>\n            <h2>{props.title}</h2>\n            <div>\n                <img src={searchImage} alt=\"Search\"></img>\n                <input value={props.inputText} onChange={props.setInputText}></input>\n            </div>\n        </div>\n    );\n}\n\nexport default SearchBox;\n","// Created By Nate Grift\n// © 2021 Nate Grift\n\nimport React from 'react';\n\nimport classes from './Loading.module.css'\n\nfunction Loading() {\n\n  return (\n    <div className={classes.Loading}></div>\n  );\n}\n\nexport default Loading;","export default __webpack_public_path__ + \"static/media/bell.f5b14a29.svg\";","// Created By Nate Grift\n// © 2021 Nate Grift\n\nimport React from 'react';\n\nimport classes from './Banner.module.css';\nimport BellImage from '../../images/bell.svg';\n\nimport Button from '../Button/Button';\n\nfunction Banner(props) {\n\n    // Prop ~ Types - Description\n\n    // text ~ String - Text for banner\n    // click ~ Function - Callback when X button is clicked\n\n    // OPTIONAL Props\n    // show ~ Boolean - Toggles showing class\n\n  \n    return (\n      <div className={`${classes.Banner} ${props.show ? classes.show : ''}`}>\n        <img src={BellImage} alt=\"Notification\"></img>\n        <p>{props.text}</p>\n        <Button click={props.click}>X</Button>\n      </div>\n    );\n}\n\nexport default Banner;\n","// Created By Nate Grift\n// © 2021 Nate Grift\n\n\nimport React, { useEffect, useState } from 'react';\n\nimport './App.css';\nimport MovieList from './components/MovieList/MovieList';\nimport SearchBox from './components/SearchBox/SearchBox';\nimport Loading from './components/Loading/Loading';\nimport Banner from './components/Banner/Banner';\n\n\n// In a production enviroment, I would like to censor this value\nconst API_KEY = 'cae18993';\n\nconst MAX_NOMINATED = 5;\n\nfunction App() {\n    // Search text state - updates every keystroke\n    const [searchText, setSearchText] = useState('');\n\n    // Movies and Nominated Movies\n    const [movies, setMovies] = useState(null);\n    const [nominated, setNominated] = useState([]);\n\n    // Errors and Banner\n    const [error, setError] = useState(null);\n    const [banner, setBanner] = useState(null);\n    const [showBanner, setShowBanner] = useState(false);\n\n    // Two way binding handler for the search box text\n    function searchTextHandler(event) {\n        // Set default Values\n        setSearchText(event.target.value);\n        setMovies(null);\n        setError(null);\n\n        // Search API\n        if (event.target.value.length > 2) {\n            fetch(\n                `https://www.omdbapi.com/?apikey=${API_KEY}&s=${event.target.value}&type=movie`\n            )\n                .then((res) => res.json())\n                .then(\n                    (result) => {\n                        // if fetch request yeilds results, add to movies to display\n                        if (result.Response ===  'True') {\n                            setMovies(result);\n                        } else {\n                            setError(result.Error);\n                        }\n                    },\n                    (err) => {\n                        setError(err);\n                    }\n                );\n        } else {\n            setError('Minimum 3 characters to Search');\n        }\n    }\n\n    // Add Movie Nomination\n    function nominateAddHandler(elem, movie) {\n        // Set Banner for Max amount of nominated\n        if (nominated.length >= MAX_NOMINATED-1) {\n            setBanner(\n                `${nominated.length + 1} Nominations Selected!  You have reached the max nominations allowed.`\n            );\n            setTimeout(() => {\n                setShowBanner(true);\n            }, 30);\n        }\n\n        // Set nominated if below max number already exists\n        if (nominated.length < MAX_NOMINATED) {\n            elem.disabled = true;\n            const newNominated = [...nominated, movie];\n            const nominatedIdList = newNominated.map(\n                (nominated) => nominated.imdbID\n            );\n            localStorage.setItem('nominated', JSON.stringify(nominatedIdList));\n            setNominated(newNominated);\n        }\n    }\n\n    // Remove Movie Nomination\n    function nominateRemoveHandler(_, movie) {\n        const newNominated = nominated.filter(\n            (nominated) => nominated.imdbID !== movie.imdbID\n        );\n        const nominatedIdList = newNominated.map(\n            (nominated) => nominated.imdbID\n        );\n        // Store to local storage unless nominated list is empty\n        if (nominatedIdList.length > 0) {\n            localStorage.setItem('nominated', JSON.stringify(nominatedIdList)); \n        } else {\n            localStorage.removeItem('nominated')\n        }\n        setNominated(newNominated);\n    }\n\n    // Removes banner with animation\n    function removeBanner() {\n        setShowBanner(false);\n        setTimeout(() => {\n            setBanner(null);\n        }, 200);\n    }\n\n    // Display Search results or loading screen\n    let searchResults;\n\n    // If movies exists\n    if (movies && searchText) {\n        searchResults = (\n            <MovieList\n                movies={movies.Search}\n                totalResults={movies.totalResults}\n                title={`Results for \"${searchText}\"`}\n                classes=\"card\"\n                buttonText=\"Nominate\"\n                buttonClick={nominateAddHandler}\n                excludeList={nominated.map((movie) => movie.imdbID)}\n            />\n        );\n\n    // If error\n    } else if (!movies && searchText && error) {\n        searchResults = (\n            <div className=\"card\">\n                <p className=\"error\">{error}</p>\n                <p className=\"errorSmall\">Type in the search box to retry</p>\n            </div>\n        );\n\n    // If content loading\n    } else if (!movies && searchText) {\n        searchResults = (\n            <div className=\"card\">\n                <Loading />\n            </div>\n        );\n\n    // Default information\n    } else {\n        searchResults = (\n            <div className=\"card\">\n                <p className=\"error\">Minimum 3 characters to Search</p>\n                <p className=\"errorSmall\">Type movie titles in search box</p>\n            </div>\n        );\n    }\n\n    // Nominated list \n    let nominatedList;\n\n    // If nominated has movies\n    if (nominated && nominated.length > 0) {\n        nominatedList = (\n            <MovieList\n                movies={nominated}\n                title=\"Nominated Movies\"\n                classes=\"card\"\n                buttonText=\"Remove\"\n                buttonClick={nominateRemoveHandler}\n                totalDisplayed={nominated.length}\n            />\n        );\n    // If nominated list is loading\n    } else if (localStorage.getItem('nominated') !== null && nominated.length <= 0) {\n            nominatedList =  <div className=\"card\">\n                <Loading />\n            </div>\n    }\n    \n    // Loading previously stored nominated movies\n    useEffect(() => {\n        const nominatedStored = localStorage.getItem('nominated');\n\n        // if no list, exit\n        if (!nominatedStored) {\n            return;\n        }\n\n        // Retreive list of previously stored nominations\n        const nominatedStoredIdList = JSON.parse(nominatedStored);\n\n        // Movies to be added to nomination list\n        let nominatedMovies = [];\n\n        // List of Promises that need to be fufilled \n        let nominatedPromises = [];\n        nominatedStoredIdList.forEach((movieId) => {\n            nominatedPromises.push(\n                fetch(`https://www.omdbapi.com/?apikey=${API_KEY}&i=${movieId}`)\n                    .then((res) => res.json())\n                    .then(\n                        (result) => {\n                            if (result.Response === 'True') {\n                                nominatedMovies.push(result);\n                            } else {\n                                setError(result.Error);\n                            }\n                        },\n                        (err) => {\n                            setError(err);\n                        }\n                    )\n            );\n        });\n\n        // Wait for all nominated movies to be fetchd then display them\n        Promise.all(nominatedPromises).then(() => {\n            setNominated(nominatedMovies);\n        });\n    }, []);\n\n    // Return app display\n    return (\n        <div className=\"App\">\n            <header>\n                <h1>The Shoppies</h1>\n            </header>\n            <section className=\"full-width card\">\n                <SearchBox\n                    inputText={searchText}\n                    setInputText={searchTextHandler}\n                    title=\"Movie title\"\n                />\n            </section>\n            <section className=\"columns-two\">\n                {/*Search Results*/}\n                {searchResults}\n                {/*Nominated List Results*/}\n                {nominatedList}\n            </section>\n            {banner ? (\n                <Banner text={banner} show={showBanner} click={removeBanner}/>\n            ) : null}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}